(#%require (only racket/base random))
(#%require (only racket/base current-milliseconds))
(define (runtime) (current-milliseconds))

(define (square x) (* x x))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) m))
        (else
         (remainder (* base (expmod base (- exp 1) m)) m))))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
  (cond ((= times 0) #t)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else #f)))

(define (timed-prime-test n)
  (define (start-prime-test start-time)
    (if (fast-prime? n 2)
        (report-prime n (- (runtime) start-time))
        #f))
  (start-prime-test (runtime)))
(define (report-prime n elapsed-time)
  (newline)
  (display n)
  (display " *** ")
  (display elapsed-time))

(define (search-for-primes n from)
  (if (> n 0)
      (if (timed-prime-test from)
          (search-for-primes (- n 1) (+ 1 from))
          (search-for-primes n (+ 1 from)))))
(search-for-primes 3 1000)
(newline)
(search-for-primes 3 10000)
(newline)
(search-for-primes 3 100000)
(newline)

