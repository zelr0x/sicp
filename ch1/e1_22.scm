(#%require (only racket/base current-milliseconds))
(define (runtime) (current-milliseconds))

(define (square x) (* x x))
(define (divides? a b) (= (remainder b a) 0))
(define (smallest-divisor n)
  (define (find-divisor test-divisor) 
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor (+ test-divisor 1)))))
  (find-divisor 2))
(define (prime? n)
  (= n (smallest-divisor n)))

(define (timed-prime-test n)
  (define (start-prime-test start-time)
    (if (prime? n)
        (report-prime n (- (runtime) start-time))
        #f))
  (start-prime-test (runtime)))
(define (report-prime n elapsed-time)
  (newline)
  (display n)
  (display " *** ")
  (display elapsed-time))

(define (search-for-primes n from)
  (if (> n 0)
      (if (timed-prime-test from)
          (search-for-primes (- n 1) (+ 1 from))
          (search-for-primes n (+ 1 from)))))
(search-for-primes 3 1000)
(newline)
(search-for-primes 3 10000)
(newline)
(search-for-primes 3 100000)
(newline)
(search-for-primes 3 100000000000)
