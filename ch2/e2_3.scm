(define (average a b)
  (/ (+ a b) 2))
(define (double x) (* x 2))

(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

(define (make-segment start end) (cons start end))
(define (start-segment s) (car s))
(define (end-segment s) (cdr s))

(define (midpoint-segment s)
  (let ((a (start-segment s))
        (b (end-segment s)))
    (make-point (average (x-point a) (x-point b))
                (average (y-point a) (y-point b)))))

(define (make-rect1 x1 y1 x2 y2)
  (let ((origin (make-point x1 y1))
        (opposite (make-point x2 y2)))
    (cons origin opposite)))
(define (origin-rect1 rect) (car rect))
(define (opposite-rect1 rect) (cdr rect))

(define (make-rect2 top left)
  (cons top left))
(define (origin-rect2 rect)
  (start-segment (cdr rect)))
(define (opposite-rect2 rect)
  (let ((x (x-point (end-segment (car rect))))
        (y (y-point (end-segment (cdr rect)))))
    (make-point x y)))

;; It is only needed for showcase.
(define (origin-rect impl)
  (if (= impl 1) origin-rect1 origin-rect2))
(define (opposite-rect impl)
  (if (= impl 1) opposite-rect1 opposite-rect2))

(define (width-rect rect impl)
  (let ((origin ((origin-rect impl) rect))
        (opposite ((opposite-rect impl) rect)))
    (abs (- (x-point opposite) (x-point origin)))))

(define (height-rect rect impl)
  (let ((origin ((origin-rect impl) rect))
        (opposite ((opposite-rect impl) rect)))
    (abs (- (y-point opposite) (y-point origin)))))

(define (perimeter rect impl)
  (+ (double (width-rect rect impl))
     (double (height-rect rect impl))))

(define (area rect impl)
  (* (width-rect rect impl)
     (height-rect rect impl)))

;; w = 7, h = 12, P = 38, S = 84
(define top-left (make-point 1 2))
(define top-right (make-point 8 2))
(define bot-left (make-point 1 -10))
(define bot-right (make-point 8 -10))
(define rect1 (make-rect1 (x-point top-left) (y-point top-left)
                          (x-point bot-right) (y-point bot-right)))
(define rect2 (make-rect2 (make-segment top-left top-right)
                          (make-segment top-left bot-left)))
(display (perimeter rect1 1))
(newline)
(display (area rect1 1))
(newline)
(display (perimeter rect2 2))
(newline)
(display (area rect2 2))
(newline)

